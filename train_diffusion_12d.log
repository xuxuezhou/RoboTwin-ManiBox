/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.
  warnings.warn(msg)
Timestamp: 2025-07-31_10-46-52
scheduler: cos args.gradient_accumulation_steps 4
whether use acclerator: False
cur_path /home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox
num episodes 50
ðŸŽ¯ Using custom objects: ['bottle']
ðŸ“Š Expected bbox dimension: 12

Data from: /home/xuxuezhou/code/RoboTwin/data/move_can_pot

Load data from /home/xuxuezhou/code/RoboTwin/data/move_can_pot/integration.pkl Shape:  torch.Size([50, 170, 24])
ðŸ”„ Using first 12 dimensions of bbox data (shape: torch.Size([170, 12]))
image_data.shape, qpos_data.shape, action_data.shape:  torch.Size([170, 12]) torch.Size([170, 14]) torch.Size([170, 14])
Load data from /home/xuxuezhou/code/RoboTwin/data/move_can_pot/integration.pkl Shape:  torch.Size([50, 170, 24])
ðŸ”„ Using first 12 dimensions of bbox data (shape: torch.Size([170, 12]))
image_data.shape, qpos_data.shape, action_data.shape:  torch.Size([170, 12]) torch.Size([170, 14]) torch.Size([170, 14])
length of train dataloader 2
You are using DiffusionPolicy.
policy_config {'lr': 0.001, 'lr_backbone': 7e-05, 'epochs': 5, 'train_loader_len': 2, 'warmup_ratio': 0.1, 'use_scheduler': 'cos', 'backbone': 'resnet18', 'masks': False, 'weight_decay': 0.0001, 'dilation': False, 'position_embedding': 'sine', 'loss_function': 'l1', 'chunk_size': 1, 'camera_names': ['cam_high', 'cam_left_wrist', 'cam_right_wrist'], 'num_next_action': 0, 'use_depth_image': False, 'use_robot_base': False, 'hidden_dim': 512, 'device': 'cuda:0', 'state_dim': 14, 'action_dim': 14, 'observation_horizon': 1, 'action_horizon': 8, 'num_inference_timesteps': 10, 'ema_power': 0.75, 'alpha': 3.0, 'max_time_steps': 1000, 'time_embed_dim': 128, 'context_len': 90, 'num_samples_per_traj': 10, 'policy_class': 'Diffusion', 'gradient_accumulation_steps': 4}
backbone visual encoder. number of parameters: 33.50M
diffusion model. number of parameters: 0.80M
  0%|          | 0/5 [00:00<?, ?it/s]
0it [00:00, ?it/s][A
                  [A  0%|          | 0/5 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/train.py", line 1215, in <module>
    main()
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/train.py", line 1211, in main
    train(args)
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/train.py", line 811, in train
    best_ckpt_info = train_process(train_dataloader, val_dataloader, config, stats)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/train.py", line 917, in train_process
    forward_dict, result = forward_pass(policy_config, data, policy)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/train.py", line 1097, in forward_pass
    result = policy(image_data, image_depth_data, qpos_data, None, None, action_data, action_is_pad)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/policy/DiffusionPolicy.py", line 124, in __call__
    return self._training_forward(image, robot_state, actions, action_is_pad)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/policy/DiffusionPolicy.py", line 133, in _training_forward
    loss = self.model(image, robot_state, actions, action_is_pad)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/policy/DiffusionPolicy.py", line 243, in forward
    bbox_features = self._extract_bbox_features(bbox_data)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/code/RoboTwin/policy/ManiBox/manibox/ManiBox/policy/DiffusionPolicy.py", line 318, in _extract_bbox_features
    bbox_features = self.bbox_encoder(bbox_data)  # batch_size * 256
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/container.py", line 217, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/xuxuezhou/miniconda3/lib/python3.12/site-packages/torch/nn/modules/linear.py", line 116, in forward
    return F.linear(input, self.weight, self.bias)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: mat1 and mat2 shapes cannot be multiplied (32x12 and 8x256)
